/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <20 21>;
            layers = <0>;
        };

        caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <20 21 22>;
            layers = <0>;
        };

        nav {
            bindings = <&mo 3>;
            key-positions = <36 41 30 35>;
        };

        sys {
            bindings = <&to 4>;
            key-positions = <36 37 40 41 30 31 34 35>;
            layers = <0>;
        };

        lock {
            bindings = <&kp LG(RC(K_LOCK))>;
            key-positions = <10 18>;
        };

        dlt {
            bindings = <&kp RA(BACKSLASH)>;
            key-positions = <13 16>;
            layers = <2>;
        };

        dgt {
            bindings = <&kp RA(RS(BACKSLASH))>;
            key-positions = <13 17>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q           &kp W           &kp E        &kp R             &kp T        &kp Y    &kp U              &kp I                &kp O            &kp P
  &mt LEFT_GUI A  &mt S LEFT_ALT  &mt D LCTRL  &mt F LEFT_SHIFT  &kp G        &kp H    &mt J RIGHT_SHIFT  &mt K RIGHT_CONTROL  &mt L RIGHT_ALT  &mt SEMI RIGHT_GUI
  &kp Z           &kp X           &kp C        &kp V             &kp B        &kp N    &kp M              &kp COMMA            &kp DOT          &kp FSLH
                                  &mo 1        &kp BACKSPACE     &kp SPACE    &kp RET  &kp DEL            &mo 2
            >;
        };

        num {
            bindings = <
  &kp F10  &kp F9  &kp F8  &kp F7  &none     &kp ASTRK  &kp N7  &kp N8  &kp N9  &kp MINUS
  &kp F11  &kp F6  &kp F5  &kp F4  &none     &kp SLASH  &kp N4  &kp N5  &kp N6  &kp PLUS
  &kp F12  &kp F3  &kp F2  &kp F1  &none     &kp DOT    &kp N1  &kp N2  &kp N3  &kp EQUAL
                   &trans  &trans  &trans    &trans     &trans  &kp N0
            >;
        };

        sym {
            bindings = <
  &kp EXCL       &kp AT                &kp HASH   &kp DLLR   &kp PRCNT    &kp CARET      &kp AMPS          &kp ASTRK          &kp LPAR  &kp RPAR
  &kp RA(GRAVE)  &kp RA(I)             &kp RA(N)  &kp RA(E)  &kp RA(U)    &kp PIPE       &kp LT            &kp GT             &kp LBRC  &kp RBRC
  &kp GRAVE      &kp RC(RS(NUMBER_2))  &kp TILDE  &kp MINUS  &kp UNDER    &kp BACKSLASH  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LBKT  &kp RBKT
                                       &trans     &trans     &trans       &trans         &trans            &trans
            >;
        };

        nav {
            bindings = <
  &none   &none  &none   &none   &none     &kp HOME  &kp PAGE_UP  &kp PAGE_DOWN  &kp END    &none
  &trans  &none  &none   &none   &none     &kp LEFT  &kp UP       &kp DOWN       &kp RIGHT  &none
  &none   &none  &none   &none   &none     &none     &none        &none          &none      &none
                 &trans  &trans  &trans    &trans    &trans       &trans
            >;
        };

        sys {
            bindings = <
  &to 0  &none       &none         &none         &bootloader          &none   &out OUT_TOG  &none         &none         &bl BL_TOG
  &none  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &ext_power EP_TOG    &none   &bt BT_SEL 3  &bt BT_SEL 4  &none         &bl BL_INC
  &none  &none       &none         &none         &sys_reset           &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bl BL_DEC
                     &trans        &trans        &trans               &trans  &bt BT_CLR    &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
