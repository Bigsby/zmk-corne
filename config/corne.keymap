/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <25 26>;
        };

        caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <25 26 27>;
        };

        lock {
            bindings = <&kp K_LOCK>;
            key-positions = <13 21>;
        };

        nav {
            bindings = <&mo 3>;
            key-positions = <36 41>;
            layers = <0>;
        };

        sys {
            bindings = <&to 4>;
            key-positions = <36 37 40 41>;
            layers = <0>;
        };
    };

    behaviors {
        a_dance: a_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "A_DANCE";
            #binding-cells = <0>;
            bindings = <&mt LEFT_GUI A>, <&key_repeat>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E        &kp R             &kp T        &kp Y    &kp U              &kp I                &kp O            &kp P               &none
&none  &mt LEFT_GUI A  &mt S LEFT_ALT  &mt D LCTRL  &mt F LEFT_SHIFT  &kp G        &kp H    &mt J RIGHT_SHIFT  &mt K RIGHT_CONTROL  &mt L RIGHT_ALT  &mt SEMI RIGHT_GUI  &none
&none  &kp Z           &kp X           &kp C        &kp V             &kp B        &kp N    &kp M              &kp COMMA            &kp DOT          &kp FSLH            &none
                                       &mo 1        &kp BACKSPACE     &kp SPACE    &kp RET  &kp DEL            &mo 2
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp F10  &kp F9  &kp F8  &kp F7  &trans    &kp ASTRK  &kp N7  &kp N8  &kp N9  &kp MINUS  &trans
&trans  &kp F11  &kp F6  &kp F5  &kp F4  &trans    &kp SLASH  &kp N4  &kp N5  &kp N6  &kp PLUS   &trans
&trans  &kp F12  &kp F3  &kp F2  &kp F1  &trans    &kp DOT    &kp N1  &kp N2  &kp N3  &kp EQUAL  &trans
                         &trans  &trans  &trans    &trans     &trans  &kp N0
            >;
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                          &trans    &trans    &kp SPACE    &kp RET    &trans     &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME    &kp PAGE_UP  &kp PAGE_DOWN  &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT    &kp UP       &kp DOWN       &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp KP_DOT  &kp KP_N1    &kp KP_N2      &kp KP_N3  &trans  &trans
                        &trans  &trans  &trans    &trans      &trans       &trans
            >;
        };

        sys {
            bindings = <
&trans  &to 0   &trans      &trans        &trans        &trans    &trans  &out OUT_TOG  &trans        &trans        &bl BL_TOG  &trans
&trans  &trans  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &trans    &trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &bl BL_INC  &trans
&trans  &trans  &trans      &trans        &trans        &trans    &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bl BL_DEC  &trans
                            &trans        &trans        &trans    &trans  &bt BT_CLR    &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        key_pad {
            if-layers = <3>;
            then-layer = <1>;
        };
    };
};
